{"version":3,"sources":["utils/crypto.ts","utils/url.ts","network/peerUtils.ts","components/ErrorFallback.tsx","components/SuspenseFallback.tsx","components/SingleRoomEntrance.tsx","components/GitHubCorner.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["secureRandomId","len","buf","window","crypto","getRandomValues","Uint8Array","arr","Array","from","hex","map","b","toString","padStart","join","rand4","Uint16Array","generateCryptoKey","a","subtle","generateKey","name","length","key","exportKey","importCryptoKey","usages","size","i","parseInt","slice","importKey","cryptoKey","encrypt","data","encoder","TextEncoder","iv","encode","encrypted","byteLength","set","decrypt","decrypted","decoder","TextDecoder","decode","extractRoomIdFromLink","link","hash","URL","URLSearchParams","get","e","getRoomIdFromUrl","location","setRoomIdToUrl","roomId","searchParams","getServerConfigFromUrl","server","url","secure","protocol","defaultPort","host","split","port","Number","path","pathname","ROOM_ID_PREFIX_LEN","isValidPeerId","peerId","startsWith","generatePeerId","peerIndex","getPeerIndexFromPeerId","getPeerIndexFromConn","conn","peer","createConnectionMap","Map","addConn","value","close","mediaTypes","markConnected","connected","isConnected","setUserId","userId","getUserId","setMediaTypes","getMediaTypes","hasConn","has","delConn","delete","getConnectedPeerIds","keys","filter","k","forEachConnectedConns","callback","values","forEach","forEachConnsAcceptingMedia","mediaType","includes","clearAll","console","log","clear","ErrorFallback","React","memo","err","useState","waitSec","setWaitSec","useEffect","setTimeout","reload","message","SuspenseFallback","className","Landing","lazy","SingleRoom","roomIdFromUrl","SingleRoomEntrance","setRoomId","linkShown","setLinkShown","linkText","setLinkText","onCreateNew","type","onClick","onChange","target","placeholder","disabled","GitHubCorner","fill","color","href","aria-label","rel","width","height","viewBox","style","position","top","border","right","aria-hidden","d","transformOrigin","ErrorBoundary","state","children","this","props","PureComponent","App","fallback","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.743009d1.chunk.js","sourcesContent":["export const sha256 = async (text: string) => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(text);\n  const buf = await window.crypto.subtle.digest(\"SHA-256\", data);\n  const arr = Array.from(new Uint8Array(buf));\n  const hex = arr.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hex;\n};\n\nexport const secureRandomId = (len = 32) => {\n  const buf = window.crypto.getRandomValues(new Uint8Array(len));\n  const arr = Array.from(buf);\n  const hex = arr.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hex;\n};\n\nexport const rand4 = () => {\n  const rand = window.crypto.getRandomValues(new Uint16Array(1))[0];\n  return 1000 + (rand % 9000);\n};\n\nexport const generateCryptoKey = async () => {\n  const key = await window.crypto.subtle.generateKey(\n    { name: \"AES-GCM\", length: 128 },\n    true,\n    [\"encrypt\", \"decrypt\"]\n  );\n  const buf = await window.crypto.subtle.exportKey(\"raw\", key);\n  const arr = Array.from(new Uint8Array(buf));\n  const hex = arr.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  return hex;\n};\n\nexport const importCryptoKey = async (\n  key: string,\n  usages: (\"encrypt\" | \"decrypt\")[]\n) => {\n  const size = key.length / 2;\n  const buf = new Uint8Array(size);\n  for (let i = 0; i < size; i += 1) {\n    buf[i] = parseInt(key.slice(i * 2, i * 2 + 2), 16);\n  }\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    buf,\n    { name: \"AES-GCM\", length: 128 },\n    true,\n    usages\n  );\n  return cryptoKey;\n};\n\nexport const encrypt = async (data: string, key: string) => {\n  const encoder = new TextEncoder();\n  const cryptoKey = await importCryptoKey(key, [\"encrypt\"]);\n  const iv = window.crypto.getRandomValues(new Uint8Array(12));\n  const encrypted = await window.crypto.subtle.encrypt(\n    { name: \"AES-GCM\", iv },\n    cryptoKey,\n    encoder.encode(data)\n  );\n  const buf = new Uint8Array(iv.length + encrypted.byteLength);\n  buf.set(iv);\n  buf.set(new Uint8Array(encrypted), iv.length);\n  return buf;\n};\n\nexport const decrypt = async (buf: ArrayBuffer, key: string) => {\n  const cryptoKey = await importCryptoKey(key, [\"decrypt\"]);\n  const decrypted = await window.crypto.subtle.decrypt(\n    { name: \"AES-GCM\", iv: buf.slice(0, 12) },\n    cryptoKey,\n    buf.slice(12)\n  );\n  const decoder = new TextDecoder(\"utf-8\");\n  const data = decoder.decode(new Uint8Array(decrypted));\n  return data;\n};\n","export const extractRoomIdFromLink = (link: string) => {\n  try {\n    const hash = new URL(link).hash.slice(1);\n    const searchParams = new URLSearchParams(hash);\n    return searchParams.get(\"roomId\");\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const getRoomIdFromUrl = () => {\n  const hash = window.location.hash.slice(1);\n  const searchParams = new URLSearchParams(hash);\n  return searchParams.get(\"roomId\");\n};\n\nexport const setRoomIdToUrl = (roomId: string) => {\n  const hash = window.location.hash.slice(1);\n  const searchParams = new URLSearchParams(hash);\n  searchParams.set(\"roomId\", roomId);\n  window.location.hash = searchParams.toString();\n};\n\nexport const getServerConfigFromUrl = () => {\n  const hash = window.location.hash.slice(1);\n  const searchParams = new URLSearchParams(hash);\n  const server = searchParams.get(\"server\");\n  try {\n    const url = new URL(server || \"\");\n    const secure = url.protocol === \"https:\";\n    const defaultPort = secure ? 443 : 80;\n    return {\n      host: url.host.split(\":\")[0],\n      port: url.port ? Number(url.port) : defaultPort,\n      path: url.pathname,\n      secure,\n    };\n  } catch (e) {\n    // ignore\n  }\n  return null;\n};\n","import Peer from \"peerjs\";\n\nexport const ROOM_ID_PREFIX_LEN = 32;\n\nexport const isValidPeerId = (\n  roomId: string,\n  peerId: unknown\n): peerId is string =>\n  typeof peerId === \"string\" &&\n  peerId.startsWith(`${roomId.slice(0, ROOM_ID_PREFIX_LEN)} `);\n\nexport const generatePeerId = (roomId: string, peerIndex: number) =>\n  `${roomId.slice(0, ROOM_ID_PREFIX_LEN)} ${peerIndex}`;\n\nexport const getPeerIndexFromPeerId = (peerId: string) =>\n  Number(peerId.split(\" \")[1]);\n\nexport const getPeerIndexFromConn = (conn: Peer.DataConnection) =>\n  getPeerIndexFromPeerId(conn.peer);\n\nexport const createConnectionMap = () => {\n  type Value = {\n    conn: Peer.DataConnection;\n    connected?: boolean;\n    userId?: string;\n    mediaTypes: string[];\n  };\n  const map = new Map<string, Value>();\n\n  const addConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.conn.close();\n    }\n    map.set(conn.peer, { conn, mediaTypes: [] });\n  };\n\n  const markConnected = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.connected = true;\n    }\n  };\n\n  const isConnected = (peerId: string) => {\n    const value = map.get(peerId);\n    return (value && value.connected) || false;\n  };\n\n  const setUserId = (conn: Peer.DataConnection, userId: string) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.userId = userId;\n    }\n  };\n\n  const getUserId = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return value && value.userId;\n  };\n\n  const setMediaTypes = (conn: Peer.DataConnection, mediaTypes: string[]) => {\n    const value = map.get(conn.peer);\n    if (value) {\n      value.mediaTypes = mediaTypes;\n    }\n  };\n\n  const getMediaTypes = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    return (value && value.mediaTypes) || [];\n  };\n\n  const hasConn = (peerId: string) => map.has(peerId);\n\n  const delConn = (conn: Peer.DataConnection) => {\n    const value = map.get(conn.peer);\n    if (value && value.conn === conn) {\n      map.delete(conn.peer);\n    }\n  };\n\n  const getConnectedPeerIds = () =>\n    Array.from(map.keys()).filter((k) => map.get(k)?.connected);\n\n  const forEachConnectedConns = (\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (value.connected) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const forEachConnsAcceptingMedia = (\n    mediaType: string,\n    callback: (conn: Peer.DataConnection) => void\n  ) => {\n    Array.from(map.values()).forEach((value) => {\n      if (\n        value.connected &&\n        value.mediaTypes &&\n        value.mediaTypes.includes(mediaType)\n      ) {\n        callback(value.conn);\n      }\n    });\n  };\n\n  const clearAll = () => {\n    if (map.size) {\n      console.log(\"connectionMap garbage:\", map);\n    }\n    map.clear();\n  };\n\n  return {\n    addConn,\n    markConnected,\n    isConnected,\n    setUserId,\n    getUserId,\n    setMediaTypes,\n    getMediaTypes,\n    hasConn,\n    delConn,\n    getConnectedPeerIds,\n    forEachConnectedConns,\n    forEachConnsAcceptingMedia,\n    clearAll,\n  };\n};\n","import React, { useEffect, useState } from \"react\";\n\nexport const ErrorFallback = React.memo<{\n  err: Error;\n}>(({ err }) => {\n  const [waitSec, setWaitSec] = useState(30);\n\n  useEffect(() => {\n    if (waitSec > 0) {\n      setTimeout(() => {\n        setWaitSec(waitSec - 1);\n      }, 1000);\n    } else {\n      window.location.reload();\n    }\n  });\n\n  return (\n    <div>\n      <h1>Unrecoverable error occurred.</h1>\n      {err && (\n        <h6>\n          {err.name}: {err.message}\n        </h6>\n      )}\n      <p>Will auto reload in {waitSec} sec.</p>\n    </div>\n  );\n});\n","import React from \"react\";\n\nimport \"./SuspenseFallback.css\";\n\nexport const SuspenseFallback = React.memo(() => (\n  <div className=\"Loading-container\">\n    <div>Loading...</div>\n  </div>\n));\n","import React, { useState } from \"react\";\n\nimport \"./SingleRoomEntrance.css\";\nimport { secureRandomId, generateCryptoKey } from \"../utils/crypto\";\nimport { ROOM_ID_PREFIX_LEN } from \"../network/peerUtils\";\nimport { getRoomIdFromUrl, extractRoomIdFromLink } from \"../utils/url\";\n\nconst Landing = React.lazy(() => import(\"./Landing\"));\nconst SingleRoom = React.lazy(() => import(\"./SingleRoom\"));\n\nconst roomIdFromUrl = getRoomIdFromUrl();\nconst userId = secureRandomId();\n\nexport const SingleRoomEntrance = React.memo(() => {\n  const [roomId, setRoomId] = useState<string | null>(roomIdFromUrl);\n  const [linkShown, setLinkShown] = useState(false);\n  const [linkText, setLinkText] = useState(\"\");\n\n  const onCreateNew = async () => {\n    setRoomId(\n      secureRandomId(ROOM_ID_PREFIX_LEN / 2) + (await generateCryptoKey())\n    );\n  };\n\n  const onEnter = () => {\n    setRoomId(extractRoomIdFromLink(linkText));\n  };\n\n  if (roomId) {\n    return <SingleRoom roomId={roomId} userId={userId} />;\n  }\n\n  return (\n    <div className=\"SingleRoomEntrance-container\">\n      <Landing />\n      <div className=\"SingleRoomEntrance-input\">\n        {!linkShown && (\n          <>\n            <div>\n              <button type=\"button\" onClick={onCreateNew}>\n                Create a new room\n              </button>\n            </div>\n            <div>OR</div>\n            <div>\n              <button type=\"button\" onClick={() => setLinkShown(true)}>\n                Enter an existing room link\n              </button>\n            </div>\n          </>\n        )}\n        {linkShown && (\n          <div>\n            <input\n              value={linkText}\n              onChange={(e) => setLinkText(e.target.value)}\n              placeholder=\"Enter room link...\"\n            />\n            <button\n              type=\"button\"\n              onClick={onEnter}\n              disabled={!extractRoomIdFromLink(linkText)}\n            >\n              Enter room\n            </button>\n            <button type=\"button\" onClick={() => setLinkShown(false)}>\n              Cancel\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\n\nimport \"./GitHubCorner.css\";\n\n// http://tholman.com/github-corners/\nexport const GitHubCorner = React.memo<{\n  size?: number;\n  fill?: string;\n  color?: string;\n}>(({ size, fill, color }) => (\n  <a\n    href=\"https://github.com/dai-shi/remote-faces\"\n    className=\"GitHubCorner-container\"\n    aria-label=\"View source on GitHub\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n  >\n    <svg\n      width={size || 80}\n      height={size || 80}\n      viewBox=\"0 0 250 250\"\n      style={{\n        fill: fill || \"#151513\",\n        color: color || \"#fff\",\n        position: \"absolute\",\n        top: 0,\n        border: 0,\n        right: 0,\n      }}\n      aria-hidden=\"true\"\n    >\n      <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\n      <path\n        d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\"\n        fill=\"currentColor\"\n        style={{ transformOrigin: \"130px 106px\" }}\n        className=\"GitHubCorner-octo-arm\"\n      />\n      <path\n        d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\"\n        fill=\"currentColor\"\n        className=\"GitHubCorner-octo-body\"\n      />\n    </svg>\n  </a>\n));\n","import React, { Suspense } from \"react\";\n\nimport \"./App.css\";\nimport { ErrorFallback } from \"./ErrorFallback\";\nimport { SuspenseFallback } from \"./SuspenseFallback\";\nimport { SingleRoomEntrance } from \"./SingleRoomEntrance\";\nimport { GitHubCorner } from \"./GitHubCorner\";\n\nclass ErrorBoundary extends React.PureComponent {\n  state: { err?: Error } = {};\n\n  static getDerivedStateFromError(err: Error) {\n    return { err };\n  }\n\n  render() {\n    const { children } = this.props;\n    const { err } = this.state;\n    if (err) return <ErrorFallback err={err} />;\n    return children;\n  }\n}\n\nexport const App = React.memo(() => (\n  <div className=\"App\">\n    <ErrorBoundary>\n      <Suspense fallback={<SuspenseFallback />}>\n        <SingleRoomEntrance />\n        <GitHubCorner size={40} fill=\"gray\" />\n      </Suspense>\n    </ErrorBoundary>\n  </div>\n));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}